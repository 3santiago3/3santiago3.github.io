{"pages":[],"posts":[{"title":"Docker 学习笔记","text":"1. 简介Docker 官网 Docker 是一个 2013 年开源的应用容器引擎，基于 Go 语言。 Docker 可以让开发者可以打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口，更重要的是容器性能极低。 Docker 从 17.03 版本之后分为 CE（Community Edition 社区版）和 EE（Enterprise Edition 企业版），一般我们使用社区版即可。 1.1 优点 避免开发和运维之间因为环境不同而导致的矛盾 比如，开发的机器中明明能运行项目，在运维的机器却跑不起来了。 避免集群环境下每台机器都部署相同的应用 在各个机器都要重复地配置环境令人厌烦，Docker 能大大简化运维工作量 1.2 容器和虚拟机Docker 是一种轻量虚拟化技术，比传统的虚拟机性能更好。 解释 Infrastructure：基础设施，简单理解为真实电脑 Host Operating：System 宿主机操作系统，例如 Linux、Windows Hypervisor：虚拟机，例如 VMware Container Engine：容器引擎，这里指 Docker 这种架构优势在于，不需要为虚拟机操作系统提供硬件模拟，所有应用程序都作为 Docker 容器工作，性能更好。 特性 Docker 容器 虚拟机 操作系统 与宿主机共享操作系统 在宿主机的操作系统上运行的主机操作系统 存储大小 镜像小，便于存储和传输 镜像庞大 性能 几乎无额外性能损失 额外的 cpu、内存消耗 移植性 轻便、灵活 笨重、与虚拟化技术耦合度高 硬件亲和性 面向软件开发者 面向硬件运维者 总结下来就是，Docker 轻量级、速度快、运行应用隔离、方便维护。 2. Docker 架构 Docker Client 客户端 可以理解为命令行工具，用户通过客户端与 Docker 守护进程进行通信，并且展示返回结果。 Docker Host 宿主机 就是安装了 Docker 程序，并运行了 Docker 守护进程的主机。 Images 镜像 镜像就是一个只读的模板，它可以是一个可运行软件（tomcat、mysql）或者是一个系统（CentOS）。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。 Container 容器，相当于 Docker Logo 中的鲸鱼上的集装箱 容器是用镜像创建的运行实例，Docker 利用容器独立运行一个或一组应用，它可以被启动、开始、停止、删除。 每个容器都是相互隔离、保证安全的平台。可以把容器看作是一个简易版的 Linux 环境（包括用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。 容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。 Registry 仓库服务注册器 仓库服务注册器（Registry）经常和仓库（Repository）混淆。 实际上，仓库服务注册器上可以有多个仓库，每个仓库可以放多个镜像，每个镜像有不同的标签（类似版本号）。 仓库分为公开仓库和私有仓库，最大的公开仓库是官方的 Docker Hub，国内也有如阿里云、网易云等。用户也可以在本地网络内创建一个私有仓库。 当用户创建了自己的镜像之后就可以使用 push 命令将它上传仓库，这样下次在另外一台机器使用这个镜像的时候，只需要从仓库上 pull 下来即可。 3. 安装Docker 提供了社区版（CE）和企业版（EE），一般使用社区版即可。 以 CentOS 7 为例，Docker 要求操作系统必须为 64 位，且 CentOS 内核版本为 3.1 及以上 查看系统内核版本信息可以通过 uname -r 获得。 安装文档（CentOS） ，选择 Install using the repository 方式安装即可。 安装完之后，配置镜像加速。 4. 常用操作官方文档 4.1 Docker 基本命令 启动 Docker：systemctl start docker 停止 Docker：systemctl stop docker 重启 Docker：systemctl restart docker 开机启动 Docker：systemctl enable docker 查看 Docker 版本信息：docker version 查看 Docker 概要信息：docker info 查看 Docker 帮助文档：docker –help 4.1 镜像相关命令 查看本地所有镜像：docker images -a 显示所有镜像，包括中间层 -q 只显示镜像ID 搜索镜像：docker search 镜像名，相当于在 Docker Hub 搜索 拉取（下载）镜像：docker pull 镜像名，例如 docker pull mysql:5.7 删除镜像：docker rmi 镜像ID或镜像名 -f 强制删除，例如 docker rmi -f fd484f19954f 4.2 容器相关命令4.2.1 创建并启动容器docker run 镜像ID或镜像名 –name 为容器指定一个名称 –interactive, -i 打开标准输出，以交互模式运行容器，通常 -it 结合使用 –tty, -t，为容器分配一个伪终端，通常 -it 结合使用 –detach, -d 后台运行容器 –publish, -p 指定端口映射，将宿主机端口映射到容器内的端口（通过宿主机的端口来访问容器中的端口） –volume, -v 挂载主机目录到容器目录 例如，docker run –name my_tomcat -it -d -p 8888:8080 -v /home/www/webapps:/usr/local/tomcat/webapps tomcat 上面的命令的运行过程如下： 查看本机是否有 tomcat 镜像 如果有，则以该镜像为模板生成容器实例 如果没有，则从远程 Docker Hub 搜索该镜像 在 Docker Hub 找不到 tomcat 镜像，则给出提示 找到了则下载该镜像到本地，并生成容器实例 4.2.2 其他 docker attach 容器ID或容器名 将本机的标准输入（键盘）、标准输出（屏幕）、错误输出（屏幕）附加到一个运行的容器，也就是说本机的输入直接输到容器中，容器的输出会直接显示在本机的屏幕上。如果容器内没有标准输出，那么 attach 操作之后会好像假死了一样。 docker exec 容器ID或容器名 执行命令 在一个正在运行的容器中执行命令。一般配合 -i -t 使用，例如 docker exec -i -t ca454f19764t /bin/bash，此操作进入容器并在容器内打开终端。 查看正在运行的容器：docker ps -a 查看所有容器，无论是否运行中 -q 只查看容器ID –last, -n 展示最近创建的 n 个容器，例如 docker ps -n 3 –filter, -f 过滤展示容器，例如 docker ps –filter status=running 启动（停止状态的）容器：docker start 容器ID或容器名 重启容器：docker restart 容器ID或容器名 停止容器：docker stop 容器ID或容器名 删除容器：docker rm 容器ID或容器名 -f 表示强制 查看日志：docker logs 容器ID或容器名 拷贝文件 主机中的文件拷贝到容器中：docker cp 主机文件路径 容器ID或容器名:容器路径 容器中的文件拷贝到主机中：docker cp 容器ID或容器名:容器路径 主机文件路径 获取容器元信息：docker inspect 容器ID或容器名 查看容器中运行的进程：docker top 容器ID或容器名 将运行时的容器提交为镜像：docker commit 运行时的容器ID或容器名 新镜像名称 –author, -a 作者 –message, -m 提交信息 / 备注 5. 容器目录挂载在创建容器的时候，将宿主机的目录与容器内的目录进行映射，就可以实现宿主机目录和容器目录的双向自动同步，通过 cp 的方式太麻烦了。 通过容器目录挂载，可以实现上传代码、修改配置、同步日志等需求。 可通过在执行 run 命令创建并运行容器时加上 -v 参数来实现，例如 docker run -v 宿主机目录1:容器目录1 -v 宿主机目录2:容器目录2 镜像ID或镜像名 注意：如果同步的是多级目录，可能会出现权限问题，这是因为 CentOS 7 中的安全模块把权限禁掉了，此时需要添加 –privileged=true 来解决。 5.1 具体例子：Docker 启动 tomcat，却无法访问 使用 run 命令创建并启动 tomcat 然后尝试使用浏览器查看项目运行情况，在地址栏输入，例如 192.168.124.130:8888 结果浏览器页面显示 404 使用 exec 命令进入容器，发现在 /urs/local/tomcat 目录内的 webapps 文件夹是空的，反而多出了一个 webapps.dist，里面包含的正是 webapps 文件夹本来应该有的文件 找到问题所在，此时就可以使用容器目录挂载来解决 先将容器内的 webapps 文件夹使用 cp 命令复制到宿主机 接着回到宿主机环境，删除刚刚运行的 tomcat 容器 重新创建并启动 tomcat 容器，使用 docker run –name 自定义容器名 -it -d -p 8888:8080 -v /宿主机目录/webapps:/usr/local/tomcat/webapps 即可 具体参考 centos7一步一步搭建docker tomcat 及重点讲解 - 一 定 会 去 旅 行 - 博客园 6. 推送镜像到 Docker Hub 注册 Docker Hub 账号 在命令行登录：docker login 账号 在命令行推送：docker push 镜像 7. 推送镜像到阿里云很多时候，中小公司为了方便搭建私有仓库，会直接使用稳定的阿里云镜像仓库。 进入 镜像仓库，创建一个镜像仓库，点进去，内有详细操作指南。 备注：当然创建镜像仓库之前也可以先创建命名空间。","link":"/2020/02/18/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"title":"Fiddler 学习笔记","text":"本文根据 全网最全最细Fiddler抓包工具，没有之一【柠檬班】 整理所得 1. Fiddler 介绍 Fiddler 是位于客户端和服务端之间的 HTTP 代理 目前最常用的 HTTP 抓包工具之一 功能非常强大，是 Web 调试的利器 监控浏览器所有的 HTTP / HTTPS 流量 查看、分析请求的内容细节 伪造客户端请求和服务器响应 测试网站性能 解密 HTTPS 的 Web 会话 全局、局部断点功能 第三方插件 使用场景 接口调试、接口测试、线上环境调试、Web 性能分析 判断前后端 bug、开发环境 hosts 配置、mock 假数据、弱网断网测试 2. 工作原理 3. 安装略。 3. 界面介绍 3.1 菜单栏 设置代理端口：Tools &gt; Options &gt; Connections &gt; 修改 Fiddler listens on port 值即可 隐藏建立通道的连接：Rules &gt; Hide CONNECTs（常用） 隐藏 304 会话：Rules &gt; Hide 304s（常用） 3.2 工具条从左到右按顺序 WinConfig：略 气泡（对话框）图标：添加备注，在 File &gt; Save 保存会话给别人看的时候有用 Replay：重发选中的请求（快捷键 r），同时按住 shift 可以重复发多次 × 图标：删除会话，快捷键 ctrl + x 删除所有会话 Go：在会话进入断点时恢复会话 Stream：流模式，一般不用 Decode：对所有会话解码 Keep：保留会话条数，例如 100 条、250 条等等 瞄准图标：按住不放，然后将“十字图标”拖动到想要监听的进程，比如拖到 Chrome 浏览器，那么就只会捕捉到 Chrome 的请求 Find：快捷键 ctrl + f Save：保存当前会话为一个 .saz 后缀的文件 相机图标：截图 时钟图标：计时器，右键取消 IE 图标：快速打开浏览器 Clear Cache：清除 IE 浏览器缓存 TextWizard：打开转码工具 Tearoff：拆分面板 搜索框：进入 https://social.msdn.microsoft.com/Search/en-US/?Refinement=59&amp;Query=搜索内容 电脑图标：显示本机网络信息 3.3 监控面板（会话列表）展示了 Fiddler 抓取到的每条 HTTP 请求，每一条称为一个 session，每条 session 都包含了 #：序号，按照页面加载顺序递增 Result：状态码 Protocal：协议，如 HTTP、HTTPS Host：域名 URL：请求地址 Body：请求大小，单位为 byte Caching：缓存相关信息 Content-Type：MIME 类型 Process：发出该请求的进程 Comments：备注 Custom：用户通过脚本设置的自定义值 3.4 命令行 + 状态栏3.4.1 命令行命令行帮助文档 3.4.2 状态栏从左到右按顺序 Capturing：正在捕捉请求中，点一下就可以取消捕捉 筛选不同进程发出的会话 断点，点一下在发起请求之前进入断点，点两下在请求响应响应之后进入断点 略 附加信息 3.5 辅助标签 + 工具3.5.1 Statistics（统计）请求的性能和其他数据分析，如 DNS 解析时间，建立 TCP/IP 连接的时间等 3.5.2 Inspectors（检查器）可以以不同的格式（Headers、TextView、Raw 等等）查看请求报文和响应报文 3.5.3 AutoResponder（自动相应器）拦截某一请求，然后进行如下操作 使用 Fiddler 内置的响应 自定义响应 重定向到本地的资源 可以拦截 js 文件制作钓鱼网站或者 mock 假数据 比方说，项目在正式环境出了问题，直接在正式环境修改代码是不合理的，此时就可以用 AutoResponder 将请求拦截，然后重定向到指定的响应内容 Fiddler 具体设置如下 勾选 Enable rules 勾选 Unmatched requests passthrough 点击 Add Rule 在 Rule Editor 输入要拦截的地址 在 Rule Editor 选择要采取的响应 点击 Save 3.5.4 Composer（创作者）简单的接口测试工具 3.5.5 Filter（过滤器）多维度的过滤规则，包括 Hosts过滤 zone filter 分为了 intranet 局域网（内网）和internet 互联网（外网） Flag the following Hosts 标示（重要处）一下的域名 Client Process过滤（客户端进程） Request Headers 过滤 Breakpoints（打断点） Response Status Code 过滤 Response Type and Size 过滤 Response Headers 过滤 Fiddler 具体设置 勾选 Use Filters（记得取消勾选） 勾选好过滤条件 点击右上角（Use Filters 右边）的 Actions &gt; Run filterset now 4. 断点 可以在请求前篡改请求数据 可以在响应后篡改响应数据 模拟网络超时的情况 Fiddler 具体设置 全局断点：Rules &gt; Automatic Breakpoints &gt; Before Requests 或者 After Responses（也可以直接在最下面的状态栏设置，3.4.2 有介绍） 局部断点 请求前断点：在下面的命令行处输入 bpu login，即可将请求中带有 login 的请求中断，再次输入 bpu 取消断点 响应后断点：在下面的命令行处输入 bpafter login，即可将请求中带有 login 的请求中断，再次输入 bpafter 取消断点 5. 弱网测试Fiddler 具体设置：Rules &gt; Performance &gt; Simulate Modem Speeds 还可以自定义限速的状态，具体操作： Rules &gt; Customize Rules 在代码中搜索“if (m_SimulateModem) {”，找到后修改里面的数值即可（记得要勾选 Rules &gt; Performance &gt; Simulate Modem Speeds） 5. HTTPS 抓包Fiddler 具体操作：Tools &gt; Options &gt; HTTPS &gt; 勾选 Decrypt HTTPS traffic 如果还是不能抓取 HTTPS 请求，执行下面操作： Tools &gt; Options &gt; HTTPS &gt; Actions &gt; 点击 Reset All Certificates，然后一直点确定来安装 fiddler 证书 然后 Tools &gt; Options &gt; HTTPS &gt; Actions &gt; 点击 Open Windows Certificate Manager 打开管理计算机证书界面 在 Windows 的管理计算机证书界面，点击操作 &gt; 查找证书 &gt; 搜索 fiddler，能查找到相应的证书即设置成功 5.1 Firefox 设置（IE 和 Chrome 执行上述操作即可） Firefox 右上角 &gt; 选项（或者地址栏输入 about:preferences） &gt; 找到网络设置（不同版本可能的位置不一样），选中“使用系统代理设置” Fiddler &gt; Tools &gt; Options &gt; HTTPS &gt; Actions &gt; 点击 Export Root Certificate to Desktop 导出证书到桌面 Firefox 右上角 &gt; 选项 &gt; 找到证书模块，点击查看证书 &gt; 选择证书机构 &gt; 点击导入，选择第 2 步的证书，然后将提示框中的选项都勾中，点击确定，重启 Firefox 即可 6. 抓 iOS 设备中的 App 的包 Fiddler &gt; Tools &gt; Options &gt; Connections &gt; 勾选 Allow remote computers to connect Fiddler &gt; Tools &gt; Options &gt; HTTPS &gt; 勾选 Capture HTTPS CONNECTS 和勾选 Decrypt HTTPS traffic 将 iOS 设备和电脑连接 WiFi 并设置代理，服务器填写电脑 IP，端口填写 Fiddler 设置的端口（Tools &gt; Options &gt; Connections &gt; Fiddler listens on port） iOS 设备使用浏览器打开 192.168.1.103:8888（电脑 IP 和 Fiddler 设置的端口），然后点击 FiddlerRoot certificate 进行安装操作 安装成功后，iOS 设备设置 &gt; 通用 &gt; 关于本机 -&gt; 证书信任设置中信任刚安装的 Fiddler 证书即可 记得关闭代理 7. 抓 Android 设备中的 App 的包 同 iOS 设备 同 iOS 设备 同 iOS 设备 同 iOS 设备 安装后，在（华为手机，其他安卓机类似）设置 &gt; 安全 &gt; 受信任的凭据 &gt; 选择用户，查看是否有 Fiddler 的证书，如果有即设置成功了。如果没有，则在设置 &gt; 安全 &gt; 从 sd 卡安装 &gt; 安装刚刚下载的证书即可 记得关闭代理 8. 其他问题 卸载 Fiddler 之后浏览器上不了网 Windows 系统，打开更改代理设置，关掉代理即可","link":"/2020/02/12/Fiddler%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"Fiddler","slug":"Fiddler","link":"/tags/Fiddler/"}],"categories":[{"name":"运维","slug":"运维","link":"/categories/%E8%BF%90%E7%BB%B4/"},{"name":"测试","slug":"测试","link":"/categories/%E6%B5%8B%E8%AF%95/"}]}